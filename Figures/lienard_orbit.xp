#include "epix.h"
#include "stdio.h"

#define delta 0.12

using namespace ePiX;

// double ux (double x) {  return (1./3.*x*x + x*x*x/6. + x*x*x*x/30.) ;}
float F(float y){ return ( - y + y*y*y ); }

P ds (P xy){
  float dx = -xy.x2();
  float dy = xy.x1() - F(xy.x2());
  return(P(dx,dy));
}

float alpha = 1;

P EulerOneStep (P ds, float dt){
  return(P(ds.x1()*dt, ds.x2()*dt));
}

int main() {

  bounding_box(P(-2.0,-0.5), P(3.0,2.0));
  picture(5,2.5);
  unitlength("2.7cm");

  begin();

  arrow(P(0,-0.2), P(0,1.6));
  arrow(P(-1.6,0), P(1.6,0));

  float x0 = 1.3;
  float x,y;

  P pa;
  path Fcurve;
  Fcurve.pt(P(0,0));
  for (int i=0; i < 15; i++){
    y = float(i)*0.1;
    x = F(y);
    Fcurve.pt(P(x,y));
  }
  bold(Blue(1.0));
  Fcurve.draw();
  plain();

  P xy = P(x0,0);
  path orbit;
  orbit.pt(xy);
  float dt=0.1;
  P xytemp;
  int iflag=1;
  P p1,p2,p3, p4, gammapoint, gnext;
  p1 = xy;
  float diffF; float newdiffF; float dttemp;

  for (int i=0; ((i < 45) && (iflag == 1)); i++){
    diffF = xy.x1()-F(xy.x2());
    xytemp = xy + EulerOneStep(ds(xy), dt);
    newdiffF = xytemp.x1()-F(xytemp.x2());
    // not very optimal but will run only a couple of times
    //
    // I am saving programmer's time

    if ((diffF > 0) && (newdiffF < 0)){
      dttemp = dt*((diffF)/(-newdiffF+diffF));
      xytemp = xy + EulerOneStep(ds(xy), dttemp);
      pa = P(xytemp);
    }

    if ((xy.x2() > alpha) && (xytemp.x2() < alpha)){
      dttemp = dt*((alpha-xy.x2())/(xytemp.x2()-xy.x2()));
      xytemp = xy + EulerOneStep(ds(xy), dttemp);
      p3 = P(xytemp);
    }

    if ((xytemp.x2() > alpha) && (xy.x2() < alpha)){
      dttemp = dt*((alpha-xy.x2())/(xytemp.x2()-xy.x2()));
      xytemp = xy + EulerOneStep(ds(xy), dttemp);
      p2 = P(xytemp);
    }

    if ((xy.x2() > 0) && (xytemp.x2() < 0)){
      dttemp = dt*((xy.x2())/(xy.x2()-xytemp.x2()));
      xytemp = xy + EulerOneStep(ds(xy), dttemp);
      p4 = P(xytemp);
      iflag = 0;
    }

    xy = xytemp;
    if (i == 3) {gammapoint=xy;}
    if (i == 4) {gnext=xy;}
    orbit.pt(xy);

  }

  dot (p2);

  bbold(Red(1.0));
  orbit.draw();
  arrow(gammapoint,gnext);
  dot (p1);
  dot (p3);
  dot (p4);
  plain(); dashed();
  line(P(-1.0,pa.x2()), P(-1.0,pa.x2()));
  line(P(-1.0,pa.x2()), P(1.0,pa.x2()));
  line(P(p4.x1(),-0.2), P(p4.x1(),2.));
  plain(Blue(1.0));
  dashed();
  line(P(-2,alpha), P(2,alpha));
  plain();

  label_color(Red(1.0));
  dot (pa);
  label(P(pa.x1(), pa.x2()), P(-15,5), "$p_a=(x_a, a(x_0))$", t);
  label_color(Red(1.0));
  label(gammapoint,P(5,2),"$\\gamma(x_0)$",r);
  label_color(Black(1.0));
  label(p1, P(0,-5), "$p_1=(x_0,0)$", b);
  label(p4, P(5,-5), "$p_4$", b);
  label(p2, P(5,5), "$p_2$", r);
  label(p3, P(-5,5), "$p_3$", l);
  label(P(0,1.7), P(5,0),"$y$", r);
  label(P(1.7,0), P(5,0),"$x$", l);
  label_color(Blue(1.0));
  label(P(2,alpha),P(5,0),"$y=\\alpha$",r);
  label_color(Blue(1.0));
  label(P(F(1.40),1.40), P(5,0),"$x=F(y)$",r);
  tikz_format();
  end();
}
