
#include "epix.h"
#include "stdio.h"
using namespace ePiX;


// double ux (double x) {  return (1./3.*x*x + x*x*x/6. + x*x*x*x/30.) ;}
double ux (double x) {  return (1./3.*x*x + x*x*x/6. + 1*x*x*x*x/15.) ;}
double sy (double y) {  return (- y*y*y/4.) ;}

P traj(double t, double C1, double C2, double lambda1, double lambda2) { 
  return P(C1*exp(lambda1*t), 
           C2*exp(lambda2*t)) ; } 

void plot_traj(double C1, double C2, double lambda1, double lambda2) {
   path Ptraj;
   double t;
   int b1 = int(-10*abs(C1));
   int b2 = int(10*abs(C2));
    for (int i=b1; i<=b2; ++i) {
      t = i/10.;
      Ptraj.pt(traj(t,C1,C2,lambda1, lambda2)); // works in all angle modes
    }
   Ptraj.draw();
   arrow(
      traj(-0.50,C1,C2,lambda1,lambda2), 
      traj(-0.40,C1,C2,lambda1,lambda2));
}



int main() {


//
// \begin{align*}
//\dot x &= x + y^3 \\
//\dot y &= -y + 2xy + x^2
//\end{align*}


  bounding_box(P(-1.2,-1.5), P(1.2,1.5));
  picture(2.4,3);
  unitlength("60pt");

  begin();

  domain R2(P(-1,-1), P(1,1), mesh(12,12)); 
  arrow(P(-1.2,0), P(1.2,0));
  arrow(P(0,-1.2), P(0,1.2));
 
  label(P(1.3,0), "x");
  label(P(0,1.3), "y");
 

  for (int i=0; i<=2; ++i) {
  plot_traj(1., double(i)/4.,   +1., -1.);
  plot_traj(1., -double(i)/4.,  +1., -1.);
  plot_traj(-1., double(i)/4.,  +1., -1.);
  plot_traj(-1., -double(i)/4., +1., -1.);
  }

  char buffer[50];
//  sprintf(buffer, "$\\lambda_1 < \\lambda_2 < 0$", mylambda);
  sprintf(buffer, "$\\lambda_1 = 1 \ ;  \ \\lambda_2 = -1$");
  label(P(0,1.7), P(0,0), buffer,b);

  plain(Red(1.0));
  bold();
  label_color(Red(1.0));
  arrow(P(0,0), P(0,1)); label(P(0,1),P(6,2),"$\\vec{v}$", b);
  arrow(P(0,0), P(1,0)); label(P(1,0),P(2,8),"$\\vec{u}$", r);

  tikz_format();

  end();
}
